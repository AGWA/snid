on:
  release:
    types: [published]
name: Publish Release Binaries
jobs:
  release:
    name: Build and Upload Release Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x
      - name: Build binaries
        run: |
          GOPATH=${{ runner.temp }}/go CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install src.agwa.name/snid/...@${{ github.event.release.name }}
          GOPATH=${{ runner.temp }}/go CGO_ENABLED=0 GOOS=linux GOARCH=arm go install src.agwa.name/snid/...@${{ github.event.release.name }}
          GOPATH=${{ runner.temp }}/go CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go install src.agwa.name/snid/...@${{ github.event.release.name }}
          GOPATH=${{ runner.temp }}/go CGO_ENABLED=0 GOOS=linux GOARCH=386 go install src.agwa.name/snid/...@${{ github.event.release.name }}
      - name: Upload binaries
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs").promises;
            const { repo: { owner, repo }, sha } = context;

            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: ${{ github.event.release.id }},
              name: "snid-${{ github.event.release.name }}-linux-amd64",
              data: await fs.readFile("${{ runner.temp }}/go/bin/snid"),
            });
            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: ${{ github.event.release.id }},
              name: "snid-${{ github.event.release.name }}-linux-arm",
              data: await fs.readFile("${{ runner.temp }}/go/bin/linux_arm/snid"),
            });
            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: ${{ github.event.release.id }},
              name: "snid-${{ github.event.release.name }}-linux-arm64",
              data: await fs.readFile("${{ runner.temp }}/go/bin/linux_arm64/snid"),
            });
            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: ${{ github.event.release.id }},
              name: "snid-${{ github.event.release.name }}-linux-386",
              data: await fs.readFile("${{ runner.temp }}/go/bin/linux_386/snid"),
            });
            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: ${{ github.event.release.id }},
              name: "sum.golang.org-sth",
              data: await fs.readFile("${{ runner.temp }}/go/pkg/sumdb/sum.golang.org/latest"),
            });
